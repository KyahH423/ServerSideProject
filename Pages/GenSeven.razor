@page "/genseven"
@using Newtonsoft.Json
@using ServerSideProject.Data

<PageTitle>Gen Seven</PageTitle>
<div class="pageTitle">
    <p style="padding-top: 20px;">Gen Seven</p>
    <button @onclick="OnShowOffcanvasClick">Search Pokedex!</button>
</div>
<div style="text-align:center; margin-top:20px">
    <h1>Click on the Pokemon Card to view more information!</h1>
</div>

@if (allGen7 == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Modal @ref="modal" UseStaticBackdrop="true" CloseOnEscape="false" />
    <Modal @ref="modalGrid" UseStaticBackdrop="true" CloseOnEscape="false" />

    // Offcanvas with grid display for search feature
    <Offcanvas @ref="offcanvas" Title="Search here for your favorite Pokemon by using its name or pokedex id! To view information on specific Pokemon please double click the row associated with it." Size="OffcanvasSize.Large">
        <BodyTemplate>
            <Grid TItem="Pokemon" Class="table table-hover table-bordered text-white searchGrid" DataProvider="PokemonDataProvider" AllowFiltering="true" Responsive="true" AllowRowClick="true" OnRowDoubleClick="ShowPokemonGridModal" ItemsPerPageText="Pokemon Per Page" PageSizeSelectorItems="@(new int[] {10,20,30})" PaginationItemsTextFormat="{0} - {1} of {2}" PageSize="10" PageSizeSelectorVisible="true" AllowPaging="true">
                <GridColumn TItem="Pokemon" HeaderText="Pokedex Id" PropertyName="Id">
                    @context.Id
                </GridColumn>
                <GridColumn TItem="Pokemon" HeaderText="Name" PropertyName="Name" StringComparison="StringComparison.Ordinal">
                    @context.Name.ToUpper()
                </GridColumn>
            </Grid>
        </BodyTemplate>
    </Offcanvas>


    <table class="pokemon-table-spacing container-fluid">
        @for (int i = 0; i < allGen7.Count(); i += 3)
        {
            var j = allGen7[i];
            <tr>
                <td class="pokemon-List pokemon-@allGen7[i].Types[0].Type.Name.ToString() col-md-4" @onclick="() => ShowPokemonModal(j)">
                    <h3 class="pokemon-name">@allGen7[i].Name.ToUpper()</h3>

                    @if (@allGen7[i].Types.Count() > 1)
                    {
                        <h3 class="pokemon-type">@allGen7[i].Types[0].Type.Name.ToString().ToUpper()/@allGen7[i].Types[1].Type.Name.ToString().ToUpper()</h3>
                    }
                    else
                    {
                        <h3 class="pokemon-type">@allGen7[i].Types[0].Type.Name.ToString().ToUpper()</h3>
                    }

                    <br>
                    <div class="pokemon-sprite-container">
                        <img class="pokemon-sprite" src="@allGen7[i].SpriteURL" alt="@allGen7[i].Name">
                    </div>
                    <BarChartComponent Title="@($"{allGen7[i].Name.ToUpper()} STATS")" Values="PData" selectedPokemon="@allGen7[i].Id" />

                </td>
                @if (i + 1 <= allGen7.Count() - 1)
                {
                    var m = allGen7[i + 1];
                    <td class="pokemon-List pokemon-@allGen7[i+1].Types[0].Type.Name.ToString() col-md-4" @onclick="() => ShowPokemonModal(m)">
                        <h3 class="pokemon-name ">@allGen7[i + 1].Name.ToUpper()</h3>

                        @if (@allGen7[i + 1].Types.Count() > 1)
                        {
                            <h3 class="pokemon-type">@allGen7[i + 1].Types[0].Type.Name.ToString().ToUpper()/@allGen7[i + 1].Types[1].Type.Name.ToString().ToUpper()</h3>
                        }
                        else
                        {
                            <h3 class="pokemon-type">@allGen7[i + 1].Types[0].Type.Name.ToString().ToUpper()</h3>
                        }

                        <br>
                        <div class="pokemon-sprite-container">
                            <img class="pokemon-sprite" src="@allGen7[i + 1].SpriteURL" alt="@allGen7[i + 1].Name">
                        </div>


                        <BarChartComponent Title="@($"{allGen7[i+1].Name.ToUpper()} STATS")" Values="PData" selectedPokemon="@allGen7[i+1].Id" />
                    </td>
                    @if (i + 2 <= allGen7.Count() - 1)
                    {
                        var n = allGen7[i + 2];
                        <td class="pokemon-List pokemon-@allGen7[i+2].Types[0].Type.Name.ToString() col-md-4" @onclick="() => ShowPokemonModal(n)">
                            <h3 class="pokemon-name ">@allGen7[i + 2].Name.ToUpper()</h3>
                            @if (@allGen7[i + 2].Types.Count() > 1)
                            {
                                <h3 class="pokemon-type">@allGen7[i + 2].Types[0].Type.Name.ToString().ToUpper()/@allGen7[i + 2].Types[1].Type.Name.ToString().ToUpper()</h3>
                            }
                            else
                            {
                                <h3 class="pokemon-type">@allGen7[i + 2].Types[0].Type.Name.ToString().ToUpper()</h3>
                            }

                            <br>
                            <div class="pokemon-sprite-container">
                                <img class="pokemon-sprite" src="@allGen7[i + 2].SpriteURL" alt="@allGen7[i + 2].Name">
                            </div>
                            <BarChartComponent Title="@($"{allGen7[i+2].Name.ToUpper()} STATS")" Values="PData" selectedPokemon="@allGen7[i+2].Id" />
                        </td>
                    }
                }
            </tr>
        }
    </table>
}

@code {
    public Pokemon[]? allGen7;
    private IEnumerable<Pokemon> gridListGen7;
    private List<(string, int)>? specificPokemonStat;
    private Dictionary<int, IEnumerable<(string, int)>> PData;
    private Dictionary<int, IEnumerable<(string, int)>> PData2;

    // For Modal display
    public Pokemon CurrentPokemon = new Pokemon();
    private Modal modal = default!;
    private string? message;

    // For Grid Modal
    public Pokemon GridCurrentPokemon = new Pokemon();
    private Modal modalGrid = default!;


    // Off Canvas Code
    private Offcanvas offcanvas;

    private async Task OnShowOffcanvasClick()
    {
        await offcanvas?.ShowAsync();
    }


    // Read in JSON file
    string json = System.IO.File.ReadAllText("./Data/gen7.json");
    protected override async Task OnInitializedAsync()
    {
        // Pokemon array for regular display
        allGen7 = Newtonsoft.Json.JsonConvert.DeserializeObject<Pokemon[]>(json);
        Dictionary<int, IEnumerable<(string, int)>> Data = new Dictionary<int, IEnumerable<(string, int)>>();
        foreach (Pokemon pokemon in allGen7)
        {
            List<(string, int)> valuesList = new List<(string, int)>();
            foreach (var stat in pokemon.Stats)
            {
                string statName = stat.Stat.Name.ToString().ToUpper();
                int statNum = stat.BaseStat;
                var statItem = (statName, statNum);
                valuesList.Add(statItem);
            }
            IEnumerable<(string, int)> Values = valuesList;
            Data.Add(pokemon.Id, Values);
        }
        PData = Data; // Pdata has no values, only keys


        // Pokemon list for Offcanvas and Grid display
        gridListGen7 = Newtonsoft.Json.JsonConvert.DeserializeObject<Pokemon[]>(json);
        Dictionary<int, IEnumerable<(string, int)>> Data2 = new Dictionary<int, IEnumerable<(string, int)>>();
        foreach (Pokemon pokemon in gridListGen7)
        {
            List<(string, int)> valuesList = new List<(string, int)>();
            foreach (var stat in pokemon.Stats)
            {
                string statName = stat.Stat.Name.ToString().ToUpper();
                int statNum = stat.BaseStat;
                var statItem = (statName, statNum);
                valuesList.Add(statItem);
            }
            IEnumerable<(string, int)> Values = valuesList;
            Data2.Add(pokemon.Id, Values);
        }
        PData2 = Data2; // PData2 has no values, only keys
    }


    // Data provider method for grid
    private async Task<GridDataProviderResult<Pokemon>> PokemonDataProvider(GridDataProviderRequest<Pokemon> request)
    {
        return await Task.FromResult(request.ApplyTo(gridListGen7));
    }


    // Modal display method for grid
    private async Task ShowPokemonGridModal(GridRowEventArgs<Pokemon> args)
    {
        GridCurrentPokemon.SpriteURL = args.Item.SpriteURL;
        GridCurrentPokemon.Abilities = args.Item.Abilities;
        GridCurrentPokemon.Stats = args.Item.Stats;
        GridCurrentPokemon.Weight = args.Item.Weight;
        GridCurrentPokemon.Height = args.Item.Height;
        GridCurrentPokemon.Id = args.Item.Id;
        GridCurrentPokemon.Moves = args.Item.Moves;
        GridCurrentPokemon.Types = args.Item.Types;
        GridCurrentPokemon.Name = args.Item.Name;
        var parameters = new Dictionary<string, object>();
        parameters.Add("Pokemon", GridCurrentPokemon);
        await modalGrid.ShowAsync<GridModal>(title: "Pokemon Information", parameters: parameters);
    }

    // Regular Modal dispaly from Pokemon card
    private async Task ShowPokemonModal(Pokemon newP)
    {
        SetC(newP);
        var parameters = new Dictionary<string, object>();
        parameters.Add("Pokemon", CurrentPokemon);
        await modal.ShowAsync<PokemonModal>(title: "Pokemon Information", parameters: parameters);
    }

    // Sets current Pokemon for regular modal display
    private void SetC(Pokemon newP)
    {
        CurrentPokemon = newP;
    }
}

