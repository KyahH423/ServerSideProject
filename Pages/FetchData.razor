@page "/fetchdata"
@using Newtonsoft.Json
@using ServerSideProject.Data

<Modal @ref="modal" UseStaticBackdrop="true" CloseOnEscape="false" />
<Offcanvas @ref="offcanvas" Title="Search Our Pokedex!" Size="OffcanvasSize.Large">
    <BodyTemplate> 
        <Grid TItem="Pokemon" Class="table table-hover table-bordered table-striped" DataProvider="PokemonDataProvider" AllowFiltering="true" Responsive="true" AllowRowClick="true" OnRowDoubleClick="ShowPokemonGridModal">
            <GridColumn TItem="Pokemon" HeaderText="Pokedex Id" PropertyName="Id">
                @context.Id 
            </GridColumn>
            <GridColumn TItem="Pokemon" HeaderText="Name" PropertyName="Name" StringComparison="StringComparison.Ordinal">
                @context.Name
            </GridColumn>
        </Grid>
    </BodyTemplate>
</Offcanvas>

<Button Color="ButtonColor.Primary" @onclick="OnShowOffcanvasClick">Show large offcanvas</Button>

@code {
    //
    public Pokemon[]? allGen3;
    private IEnumerable<Pokemon> gridListGen3;
    private List<(string, int)>? specificPokemonStat;
    private Dictionary<int, IEnumerable<(string, int)>> PData;

    // For Modal display 
    public Pokemon CurrentPokemon = new Pokemon();
    private Modal modal = default!;
    private string? message;

    // Off Canvas Code
    private Offcanvas offcanvas;
    private async Task OnShowOffcanvasClick()
    {
        await offcanvas?.ShowAsync();
    }


    // Read in JSON file
    string json = System.IO.File.ReadAllText("./Data/gen3.json");
    protected override async Task OnInitializedAsync()
    {
        

        gridListGen3 = Newtonsoft.Json.JsonConvert.DeserializeObject<Pokemon[]>(json);
        Dictionary<int, IEnumerable<(string, int)>> Data2 = new Dictionary<int, IEnumerable<(string, int)>>();
        foreach (Pokemon pokemon in gridListGen3)
        {
            List<(string, int)> valuesList = new List<(string, int)>();
            foreach (var stat in pokemon.Stats)
            {
                string statName = stat.Stat.Name.ToString().ToUpper();
                int statNum = stat.BaseStat;
                var statItem = (statName, statNum);
                valuesList.Add(statItem);
            }
            IEnumerable<(string, int)> Values = valuesList;
            Data2.Add(pokemon.Id, Values);
        }
        PData = Data2; // PData has no values, only keys
    }


    // Data provider method for grid
    private async Task<GridDataProviderResult<Pokemon>> PokemonDataProvider(GridDataProviderRequest<Pokemon> request)
    {
        return await Task.FromResult(request.ApplyTo(gridListGen3));
    }


    // Modal display method for grid
    private async Task ShowPokemonGridModal(GridRowEventArgs<Pokemon> args)
    {
        CurrentPokemon.SpriteURL = args.Item.SpriteURL;
        CurrentPokemon.Abilities = args.Item.Abilities;
        CurrentPokemon.Stats = args.Item.Stats;
        CurrentPokemon.Weight = args.Item.Weight;
        CurrentPokemon.Height = args.Item.Height;
        CurrentPokemon.Id = args.Item.Id;
        CurrentPokemon.Moves = args.Item.Moves;
        CurrentPokemon.Types = args.Item.Types;
        CurrentPokemon.Name = args.Item.Name;
        var parameters = new Dictionary<string, object>();
        parameters.Add("Pokemon", CurrentPokemon);
        await modal.ShowAsync<PokemonModal>(title: "Employee Details", parameters: parameters);
    }

    private async Task ShowEmployeeComponent(Pokemon newP)
    {
        SetC(newP);
        var parameters = new Dictionary<string, object>();
        parameters.Add("Pokemon", CurrentPokemon);
        await modal.ShowAsync<PokemonModal>(title: "Employee Details", parameters: parameters);
    }

    // Sets current Pokemon for regular modal display
    private void SetC(Pokemon newP)
    {
        CurrentPokemon = newP;
    }
}